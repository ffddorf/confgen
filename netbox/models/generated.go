// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package models

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// An enumeration.
type DcimInterfaceDuplexChoices string

const (
	// Half
	DcimInterfaceDuplexChoicesHalf DcimInterfaceDuplexChoices = "HALF"
	// Full
	DcimInterfaceDuplexChoicesFull DcimInterfaceDuplexChoices = "FULL"
	// Auto
	DcimInterfaceDuplexChoicesAuto DcimInterfaceDuplexChoices = "AUTO"
)

// An enumeration.
type DcimInterfaceTypeChoices string

const (
	// Virtual
	DcimInterfaceTypeChoicesVirtual DcimInterfaceTypeChoices = "VIRTUAL"
	// Bridge
	DcimInterfaceTypeChoicesBridge DcimInterfaceTypeChoices = "BRIDGE"
	// Link Aggregation Group (LAG)
	DcimInterfaceTypeChoicesLag DcimInterfaceTypeChoices = "LAG"
	// 100BASE-TX (10/100ME)
	DcimInterfaceTypeChoicesA100baseTx DcimInterfaceTypeChoices = "A_100BASE_TX"
	// 1000BASE-T (1GE)
	DcimInterfaceTypeChoicesA1000baseT DcimInterfaceTypeChoices = "A_1000BASE_T"
	// 2.5GBASE-T (2.5GE)
	DcimInterfaceTypeChoicesA25gbaseT DcimInterfaceTypeChoices = "A_2_5GBASE_T"
	// 5GBASE-T (5GE)
	DcimInterfaceTypeChoicesA5gbaseT DcimInterfaceTypeChoices = "A_5GBASE_T"
	// 10GBASE-T (10GE)
	DcimInterfaceTypeChoicesA10gbaseT DcimInterfaceTypeChoices = "A_10GBASE_T"
	// 10GBASE-CX4 (10GE)
	DcimInterfaceTypeChoicesA10gbaseCx4 DcimInterfaceTypeChoices = "A_10GBASE_CX4"
	// GBIC (1GE)
	DcimInterfaceTypeChoicesA1000baseXGbic DcimInterfaceTypeChoices = "A_1000BASE_X_GBIC"
	// SFP (1GE)
	DcimInterfaceTypeChoicesA1000baseXSfp DcimInterfaceTypeChoices = "A_1000BASE_X_SFP"
	// SFP+ (10GE)
	DcimInterfaceTypeChoicesA10gbaseXSfpp DcimInterfaceTypeChoices = "A_10GBASE_X_SFPP"
	// XFP (10GE)
	DcimInterfaceTypeChoicesA10gbaseXXfp DcimInterfaceTypeChoices = "A_10GBASE_X_XFP"
	// XENPAK (10GE)
	DcimInterfaceTypeChoicesA10gbaseXXenpak DcimInterfaceTypeChoices = "A_10GBASE_X_XENPAK"
	// X2 (10GE)
	DcimInterfaceTypeChoicesA10gbaseXX2 DcimInterfaceTypeChoices = "A_10GBASE_X_X2"
	// SFP28 (25GE)
	DcimInterfaceTypeChoicesA25gbaseXSfp28 DcimInterfaceTypeChoices = "A_25GBASE_X_SFP28"
	// SFP56 (50GE)
	DcimInterfaceTypeChoicesA50gbaseXSfp56 DcimInterfaceTypeChoices = "A_50GBASE_X_SFP56"
	// QSFP+ (40GE)
	DcimInterfaceTypeChoicesA40gbaseXQsfpp DcimInterfaceTypeChoices = "A_40GBASE_X_QSFPP"
	// QSFP28 (50GE)
	DcimInterfaceTypeChoicesA50gbaseXSfp28 DcimInterfaceTypeChoices = "A_50GBASE_X_SFP28"
	// CFP (100GE)
	DcimInterfaceTypeChoicesA100gbaseXCfp DcimInterfaceTypeChoices = "A_100GBASE_X_CFP"
	// CFP2 (100GE)
	DcimInterfaceTypeChoicesA100gbaseXCfp2 DcimInterfaceTypeChoices = "A_100GBASE_X_CFP2"
	// CFP2 (200GE)
	DcimInterfaceTypeChoicesA200gbaseXCfp2 DcimInterfaceTypeChoices = "A_200GBASE_X_CFP2"
	// CFP4 (100GE)
	DcimInterfaceTypeChoicesA100gbaseXCfp4 DcimInterfaceTypeChoices = "A_100GBASE_X_CFP4"
	// Cisco CPAK (100GE)
	DcimInterfaceTypeChoicesA100gbaseXCpak DcimInterfaceTypeChoices = "A_100GBASE_X_CPAK"
	// QSFP28 (100GE)
	DcimInterfaceTypeChoicesA100gbaseXQsfp28 DcimInterfaceTypeChoices = "A_100GBASE_X_QSFP28"
	// QSFP56 (200GE)
	DcimInterfaceTypeChoicesA200gbaseXQsfp56 DcimInterfaceTypeChoices = "A_200GBASE_X_QSFP56"
	// QSFP-DD (400GE)
	DcimInterfaceTypeChoicesA400gbaseXQsfpdd DcimInterfaceTypeChoices = "A_400GBASE_X_QSFPDD"
	// OSFP (400GE)
	DcimInterfaceTypeChoicesA400gbaseXOsfp DcimInterfaceTypeChoices = "A_400GBASE_X_OSFP"
	// IEEE 802.11a
	DcimInterfaceTypeChoicesIeee80211a DcimInterfaceTypeChoices = "IEEE802_11A"
	// IEEE 802.11b/g
	DcimInterfaceTypeChoicesIeee80211g DcimInterfaceTypeChoices = "IEEE802_11G"
	// IEEE 802.11n
	DcimInterfaceTypeChoicesIeee80211n DcimInterfaceTypeChoices = "IEEE802_11N"
	// IEEE 802.11ac
	DcimInterfaceTypeChoicesIeee80211ac DcimInterfaceTypeChoices = "IEEE802_11AC"
	// IEEE 802.11ad
	DcimInterfaceTypeChoicesIeee80211ad DcimInterfaceTypeChoices = "IEEE802_11AD"
	// IEEE 802.11ax
	DcimInterfaceTypeChoicesIeee80211ax DcimInterfaceTypeChoices = "IEEE802_11AX"
	// IEEE 802.15.1 (Bluetooth)
	DcimInterfaceTypeChoicesIeee802151 DcimInterfaceTypeChoices = "IEEE802_15_1"
	// GSM
	DcimInterfaceTypeChoicesGsm DcimInterfaceTypeChoices = "GSM"
	// CDMA
	DcimInterfaceTypeChoicesCdma DcimInterfaceTypeChoices = "CDMA"
	// LTE
	DcimInterfaceTypeChoicesLte DcimInterfaceTypeChoices = "LTE"
	// OC-3/STM-1
	DcimInterfaceTypeChoicesSonetOc3 DcimInterfaceTypeChoices = "SONET_OC3"
	// OC-12/STM-4
	DcimInterfaceTypeChoicesSonetOc12 DcimInterfaceTypeChoices = "SONET_OC12"
	// OC-48/STM-16
	DcimInterfaceTypeChoicesSonetOc48 DcimInterfaceTypeChoices = "SONET_OC48"
	// OC-192/STM-64
	DcimInterfaceTypeChoicesSonetOc192 DcimInterfaceTypeChoices = "SONET_OC192"
	// OC-768/STM-256
	DcimInterfaceTypeChoicesSonetOc768 DcimInterfaceTypeChoices = "SONET_OC768"
	// OC-1920/STM-640
	DcimInterfaceTypeChoicesSonetOc1920 DcimInterfaceTypeChoices = "SONET_OC1920"
	// OC-3840/STM-1234
	DcimInterfaceTypeChoicesSonetOc3840 DcimInterfaceTypeChoices = "SONET_OC3840"
	// SFP (1GFC)
	DcimInterfaceTypeChoicesA1gfcSfp DcimInterfaceTypeChoices = "A_1GFC_SFP"
	// SFP (2GFC)
	DcimInterfaceTypeChoicesA2gfcSfp DcimInterfaceTypeChoices = "A_2GFC_SFP"
	// SFP (4GFC)
	DcimInterfaceTypeChoicesA4gfcSfp DcimInterfaceTypeChoices = "A_4GFC_SFP"
	// SFP+ (8GFC)
	DcimInterfaceTypeChoicesA8gfcSfpp DcimInterfaceTypeChoices = "A_8GFC_SFPP"
	// SFP+ (16GFC)
	DcimInterfaceTypeChoicesA16gfcSfpp DcimInterfaceTypeChoices = "A_16GFC_SFPP"
	// SFP28 (32GFC)
	DcimInterfaceTypeChoicesA32gfcSfp28 DcimInterfaceTypeChoices = "A_32GFC_SFP28"
	// QSFP+ (64GFC)
	DcimInterfaceTypeChoicesA64gfcQsfpp DcimInterfaceTypeChoices = "A_64GFC_QSFPP"
	// QSFP28 (128GFC)
	DcimInterfaceTypeChoicesA128gfcQsfp28 DcimInterfaceTypeChoices = "A_128GFC_QSFP28"
	// SDR (2 Gbps)
	DcimInterfaceTypeChoicesInfinibandSdr DcimInterfaceTypeChoices = "INFINIBAND_SDR"
	// DDR (4 Gbps)
	DcimInterfaceTypeChoicesInfinibandDdr DcimInterfaceTypeChoices = "INFINIBAND_DDR"
	// QDR (8 Gbps)
	DcimInterfaceTypeChoicesInfinibandQdr DcimInterfaceTypeChoices = "INFINIBAND_QDR"
	// FDR10 (10 Gbps)
	DcimInterfaceTypeChoicesInfinibandFdr10 DcimInterfaceTypeChoices = "INFINIBAND_FDR10"
	// FDR (13.5 Gbps)
	DcimInterfaceTypeChoicesInfinibandFdr DcimInterfaceTypeChoices = "INFINIBAND_FDR"
	// EDR (25 Gbps)
	DcimInterfaceTypeChoicesInfinibandEdr DcimInterfaceTypeChoices = "INFINIBAND_EDR"
	// HDR (50 Gbps)
	DcimInterfaceTypeChoicesInfinibandHdr DcimInterfaceTypeChoices = "INFINIBAND_HDR"
	// NDR (100 Gbps)
	DcimInterfaceTypeChoicesInfinibandNdr DcimInterfaceTypeChoices = "INFINIBAND_NDR"
	// XDR (250 Gbps)
	DcimInterfaceTypeChoicesInfinibandXdr DcimInterfaceTypeChoices = "INFINIBAND_XDR"
	// T1 (1.544 Mbps)
	DcimInterfaceTypeChoicesT1 DcimInterfaceTypeChoices = "T1"
	// E1 (2.048 Mbps)
	DcimInterfaceTypeChoicesE1 DcimInterfaceTypeChoices = "E1"
	// T3 (45 Mbps)
	DcimInterfaceTypeChoicesT3 DcimInterfaceTypeChoices = "T3"
	// E3 (34 Mbps)
	DcimInterfaceTypeChoicesE3 DcimInterfaceTypeChoices = "E3"
	// xDSL
	DcimInterfaceTypeChoicesXdsl DcimInterfaceTypeChoices = "XDSL"
	// Cisco StackWise
	DcimInterfaceTypeChoicesCiscoStackwise DcimInterfaceTypeChoices = "CISCO_STACKWISE"
	// Cisco StackWise Plus
	DcimInterfaceTypeChoicesCiscoStackwisePlus DcimInterfaceTypeChoices = "CISCO_STACKWISE_PLUS"
	// Cisco FlexStack
	DcimInterfaceTypeChoicesCiscoFlexstack DcimInterfaceTypeChoices = "CISCO_FLEXSTACK"
	// Cisco FlexStack Plus
	DcimInterfaceTypeChoicesCiscoFlexstackPlus DcimInterfaceTypeChoices = "CISCO_FLEXSTACK_PLUS"
	// Cisco StackWise-80
	DcimInterfaceTypeChoicesCiscoStackwise80 DcimInterfaceTypeChoices = "CISCO_STACKWISE_80"
	// Cisco StackWise-160
	DcimInterfaceTypeChoicesCiscoStackwise160 DcimInterfaceTypeChoices = "CISCO_STACKWISE_160"
	// Cisco StackWise-320
	DcimInterfaceTypeChoicesCiscoStackwise320 DcimInterfaceTypeChoices = "CISCO_STACKWISE_320"
	// Cisco StackWise-480
	DcimInterfaceTypeChoicesCiscoStackwise480 DcimInterfaceTypeChoices = "CISCO_STACKWISE_480"
	// Juniper VCP
	DcimInterfaceTypeChoicesJuniperVcp DcimInterfaceTypeChoices = "JUNIPER_VCP"
	// Extreme SummitStack
	DcimInterfaceTypeChoicesExtremeSummitstack DcimInterfaceTypeChoices = "EXTREME_SUMMITSTACK"
	// Extreme SummitStack-128
	DcimInterfaceTypeChoicesExtremeSummitstack128 DcimInterfaceTypeChoices = "EXTREME_SUMMITSTACK_128"
	// Extreme SummitStack-256
	DcimInterfaceTypeChoicesExtremeSummitstack256 DcimInterfaceTypeChoices = "EXTREME_SUMMITSTACK_256"
	// Extreme SummitStack-512
	DcimInterfaceTypeChoicesExtremeSummitstack512 DcimInterfaceTypeChoices = "EXTREME_SUMMITSTACK_512"
	// Other
	DcimInterfaceTypeChoicesOther DcimInterfaceTypeChoices = "OTHER"
)

// DeviceDeviceDeviceType includes the requested fields of the GraphQL type DeviceType.
type DeviceDeviceDeviceType struct {
	Name        string                                          `json:"name"`
	Rack        DeviceDeviceDeviceTypeRackRackType              `json:"rack"`
	Location    DeviceDeviceDeviceTypeLocationLocationType      `json:"location"`
	Site        DeviceDeviceDeviceTypeSiteSiteType              `json:"site"`
	Primary_ip4 DeviceDeviceDeviceTypePrimary_ip4IPAddressType  `json:"primary_ip4"`
	Primary_ip6 DeviceDeviceDeviceTypePrimary_ip6IPAddressType  `json:"primary_ip6"`
	Interfaces  []DeviceDeviceDeviceTypeInterfacesInterfaceType `json:"interfaces"`
}

// GetName returns DeviceDeviceDeviceType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetName() string { return v.Name }

// GetRack returns DeviceDeviceDeviceType.Rack, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetRack() DeviceDeviceDeviceTypeRackRackType { return v.Rack }

// GetLocation returns DeviceDeviceDeviceType.Location, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetLocation() DeviceDeviceDeviceTypeLocationLocationType {
	return v.Location
}

// GetSite returns DeviceDeviceDeviceType.Site, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetSite() DeviceDeviceDeviceTypeSiteSiteType { return v.Site }

// GetPrimary_ip4 returns DeviceDeviceDeviceType.Primary_ip4, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetPrimary_ip4() DeviceDeviceDeviceTypePrimary_ip4IPAddressType {
	return v.Primary_ip4
}

// GetPrimary_ip6 returns DeviceDeviceDeviceType.Primary_ip6, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetPrimary_ip6() DeviceDeviceDeviceTypePrimary_ip6IPAddressType {
	return v.Primary_ip6
}

// GetInterfaces returns DeviceDeviceDeviceType.Interfaces, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceType) GetInterfaces() []DeviceDeviceDeviceTypeInterfacesInterfaceType {
	return v.Interfaces
}

// DeviceDeviceDeviceTypeInterfacesInterfaceType includes the requested fields of the GraphQL type InterfaceType.
type DeviceDeviceDeviceTypeInterfacesInterfaceType struct {
	Name             string                                                                       `json:"name"`
	Description      string                                                                       `json:"description"`
	Type             DcimInterfaceTypeChoices                                                     `json:"type"`
	Enabled          bool                                                                         `json:"enabled"`
	Speed            int                                                                          `json:"speed"`
	Duplex           DcimInterfaceDuplexChoices                                                   `json:"duplex"`
	Ip_addresses     []DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType     `json:"ip_addresses"`
	Parent           DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType             `json:"parent"`
	Child_interfaces []DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType `json:"child_interfaces"`
}

// GetName returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetName() string { return v.Name }

// GetDescription returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Description, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetDescription() string { return v.Description }

// GetType returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Type, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetType() DcimInterfaceTypeChoices {
	return v.Type
}

// GetEnabled returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Enabled, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetEnabled() bool { return v.Enabled }

// GetSpeed returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Speed, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetSpeed() int { return v.Speed }

// GetDuplex returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Duplex, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetDuplex() DcimInterfaceDuplexChoices {
	return v.Duplex
}

// GetIp_addresses returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Ip_addresses, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetIp_addresses() []DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType {
	return v.Ip_addresses
}

// GetParent returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Parent, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetParent() DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType {
	return v.Parent
}

// GetChild_interfaces returns DeviceDeviceDeviceTypeInterfacesInterfaceType.Child_interfaces, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceType) GetChild_interfaces() []DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType {
	return v.Child_interfaces
}

// DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType includes the requested fields of the GraphQL type InterfaceType.
type DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType struct {
	Name          string                                                                                                `json:"name"`
	Description   string                                                                                                `json:"description"`
	Type          DcimInterfaceTypeChoices                                                                              `json:"type"`
	Enabled       bool                                                                                                  `json:"enabled"`
	Untagged_vlan DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType       `json:"untagged_vlan"`
	Ip_addresses  []DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType `json:"ip_addresses"`
}

// GetName returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetName() string {
	return v.Name
}

// GetDescription returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Description, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetDescription() string {
	return v.Description
}

// GetType returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Type, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetType() DcimInterfaceTypeChoices {
	return v.Type
}

// GetEnabled returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Enabled, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetEnabled() bool {
	return v.Enabled
}

// GetUntagged_vlan returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Untagged_vlan, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetUntagged_vlan() DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType {
	return v.Untagged_vlan
}

// GetIp_addresses returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType.Ip_addresses, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceType) GetIp_addresses() []DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType {
	return v.Ip_addresses
}

// DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType includes the requested fields of the GraphQL type IPAddressType.
type DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType struct {
	// IPv4 or IPv6 address (with mask)
	Address string `json:"address"`
}

// GetAddress returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType.Address, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeIp_addressesIPAddressType) GetAddress() string {
	return v.Address
}

// DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType includes the requested fields of the GraphQL type VLANType.
type DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType struct {
	Vid int `json:"vid"`
}

// GetVid returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType.Vid, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeChild_interfacesInterfaceTypeUntagged_vlanVLANType) GetVid() int {
	return v.Vid
}

// DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType includes the requested fields of the GraphQL type IPAddressType.
type DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType struct {
	// IPv4 or IPv6 address (with mask)
	Address string `json:"address"`
}

// GetAddress returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType.Address, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeIp_addressesIPAddressType) GetAddress() string {
	return v.Address
}

// DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType includes the requested fields of the GraphQL type InterfaceType.
type DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType struct {
	Id string `json:"id"`
}

// GetId returns DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType.Id, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeInterfacesInterfaceTypeParentInterfaceType) GetId() string {
	return v.Id
}

// DeviceDeviceDeviceTypeLocationLocationType includes the requested fields of the GraphQL type LocationType.
type DeviceDeviceDeviceTypeLocationLocationType struct {
	Name string `json:"name"`
}

// GetName returns DeviceDeviceDeviceTypeLocationLocationType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeLocationLocationType) GetName() string { return v.Name }

// DeviceDeviceDeviceTypePrimary_ip4IPAddressType includes the requested fields of the GraphQL type IPAddressType.
type DeviceDeviceDeviceTypePrimary_ip4IPAddressType struct {
	// IPv4 or IPv6 address (with mask)
	Address string `json:"address"`
}

// GetAddress returns DeviceDeviceDeviceTypePrimary_ip4IPAddressType.Address, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypePrimary_ip4IPAddressType) GetAddress() string { return v.Address }

// DeviceDeviceDeviceTypePrimary_ip6IPAddressType includes the requested fields of the GraphQL type IPAddressType.
type DeviceDeviceDeviceTypePrimary_ip6IPAddressType struct {
	// IPv4 or IPv6 address (with mask)
	Address string `json:"address"`
}

// GetAddress returns DeviceDeviceDeviceTypePrimary_ip6IPAddressType.Address, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypePrimary_ip6IPAddressType) GetAddress() string { return v.Address }

// DeviceDeviceDeviceTypeRackRackType includes the requested fields of the GraphQL type RackType.
type DeviceDeviceDeviceTypeRackRackType struct {
	Name string `json:"name"`
}

// GetName returns DeviceDeviceDeviceTypeRackRackType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeRackRackType) GetName() string { return v.Name }

// DeviceDeviceDeviceTypeSiteSiteType includes the requested fields of the GraphQL type SiteType.
type DeviceDeviceDeviceTypeSiteSiteType struct {
	Name string `json:"name"`
}

// GetName returns DeviceDeviceDeviceTypeSiteSiteType.Name, and is useful for accessing the field via an interface.
func (v *DeviceDeviceDeviceTypeSiteSiteType) GetName() string { return v.Name }

// DeviceResponse is returned by Device on success.
type DeviceResponse struct {
	Device DeviceDeviceDeviceType `json:"device"`
}

// GetDevice returns DeviceResponse.Device, and is useful for accessing the field via an interface.
func (v *DeviceResponse) GetDevice() DeviceDeviceDeviceType { return v.Device }

// __DeviceInput is used internally by genqlient
type __DeviceInput struct {
	Id int `json:"id"`
}

// GetId returns __DeviceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeviceInput) GetId() int { return v.Id }

func Device(
	ctx context.Context,
	client graphql.Client,
	id int,
) (*DeviceResponse, error) {
	req := &graphql.Request{
		OpName: "Device",
		Query: `
query Device ($id: Int!) {
	device(id: $id) {
		name
		rack {
			name
		}
		location {
			name
		}
		site {
			name
		}
		primary_ip4 {
			address
		}
		primary_ip6 {
			address
		}
		interfaces {
			name
			description
			type
			enabled
			speed
			duplex
			ip_addresses {
				address
			}
			parent {
				id
			}
			child_interfaces {
				name
				description
				type
				enabled
				untagged_vlan {
					vid
				}
				ip_addresses {
					address
				}
			}
		}
	}
}
`,
		Variables: &__DeviceInput{
			Id: id,
		},
	}
	var err error

	var data DeviceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
